From Andreas Varga interview with Bob Yannes
http://sid.kubarth.com/articles/interview_bob_yannes.html

ADSR
----
The Envelope Generator was simply an 8-bit up/down counter which, when triggered by the Gate bit, counted from 0 to 255 at the Attack rate, 
from 255 down to the programmed Sustain value at the Decay rate, remained at the Sustain value until the Gate bit was cleared then counted down 
from the Sustain value to 0 at the Release rate.

A programmable frequency divider was used to set the various rates (unfortunately I don't remember how many bits the divider was, either 12 or 16 bits). 

A small look-up table translated the 16 register-programmable values to the appropriate number to load into the frequency divider. 

Depending on what state the Envelope Generator was in (i.e. ADS or R), the appropriate register would be selected and that number would be 
translated and loaded into the divider. Obviously it would have been better to have individual bit control of the divider which would have 
provided great resolution for each rate, however I did not have enough silicon area for a lot of register bits. Using this approach, I was 
able to cram a wide range of rates into 4 bits, allowing the ADSR to be defined in two bytes instead of eight. 

The actual numbers in the look-up table were arrived at subjectively by setting up typical patches on a Sequential Circuits Pro-1 and measuring 
the envelope times by ear (which is why the available rates seem strange)!

In order to more closely model the exponential decay of sounds, another look-up table on the output of the Envelope Generator would sequentially 
divide the clock to the Envelope Generator by two at specific counts in the Decay and Release cycles. This created a piece-wise linear approximation 
of an exponential. I was particularly happy how well this worked considering the simplicity of the circuitry. The Attack, however, was linear, 
but this sounded fine.

A digital comparator was used for the Sustain function. The upper four bits of the Up/Down counter were compared to the programmed 
Sustain value and would stop the clock to the Envelope Generator when the counter counted down to the Sustain value. 
This created 16 linearly spaced sustain levels without having to go through a look-up table translation between the 4-bit register value and the 8-bit Envelope Generator output. It also meant that sustain levels were adjustable in steps of 16. Again, more register bits would have provided higher resolution.
When the Gate bit was cleared, the clock would again be enabled, allowing the counter to count down to zero. 
Like an analog envelope generator, the SID Envelope Generator would track the Sustain level if it was changed to a lower value during 
the Sustain portion of the envelope, however, it would not count UP if the Sustain level were set higher.

The 8-bit output of the Envelope Generator was then sent to the Multiplying D/A converter to modulate the amplitude of 
the selected Oscillator Waveform (to be technically accurate, actually the waveform was modulating the output of the Envelope Generator, 
but the result is the same).

The envelope counter can flip from 0xff to 0x00 by changing
state to release, then to attack. The envelope counter is
then frozen at zero; to unlock this situation the state must
be changed to release, then to attack. This has been verified
by sampling ENV3.
